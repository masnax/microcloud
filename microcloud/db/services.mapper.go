package db

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/microcluster/cluster"
	"github.com/lxc/lxd/lxd/db/query"
	"github.com/lxc/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var serviceObjects = cluster.RegisterStmt(`
SELECT services.id, services.name, services.state_dir
  FROM services
  ORDER BY services.name
`)

var serviceObjectsByName = cluster.RegisterStmt(`
SELECT services.id, services.name, services.state_dir
  FROM services
  WHERE ( services.name = ? )
  ORDER BY services.name
`)

var serviceID = cluster.RegisterStmt(`
SELECT services.id FROM services
  WHERE services.name = ?
`)

var serviceCreate = cluster.RegisterStmt(`
INSERT INTO services (name, state_dir)
  VALUES (?, ?)
`)

var serviceDeleteByName = cluster.RegisterStmt(`
DELETE FROM services WHERE name = ?
`)

var serviceUpdate = cluster.RegisterStmt(`
UPDATE services
  SET name = ?, state_dir = ?
 WHERE id = ?
`)

// GetServices returns all available Services.
// generator: Service GetMany
func GetServices(ctx context.Context, tx *sql.Tx, filters ...ServiceFilter) ([]Service, error) {
	var err error

	// Result slice.
	objects := make([]Service, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = cluster.Stmt(tx, serviceObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"serviceObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Name != nil {
			args = append(args, []any{filter.Name}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, serviceObjectsByName)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"serviceObjectsByName\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(serviceObjectsByName)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"serviceObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Name == nil {
			return nil, fmt.Errorf("Cannot filter on empty ServiceFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Dest function for scanning a row.
	dest := func(scan func(dest ...any) error) error {
		s := Service{}
		err := scan(&s.ID, &s.Name, &s.StateDir)
		if err != nil {
			return err
		}

		objects = append(objects, s)

		return nil
	}

	// Select.
	if sqlStmt != nil {
		err = query.SelectObjects(ctx, sqlStmt, dest, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		err = query.Scan(ctx, tx, queryStr, dest, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"services\" table: %w", err)
	}

	return objects, nil
}

// GetService returns the Service with the given key.
// generator: Service GetOne
func GetService(ctx context.Context, tx *sql.Tx, name ServiceType) (*Service, error) {
	filter := ServiceFilter{}
	filter.Name = &name

	objects, err := GetServices(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"services\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "Service not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"services\" entry matches")
	}
}

// GetServiceID return the ID of the Service with the given key.
// generator: Service ID
func GetServiceID(ctx context.Context, tx *sql.Tx, name ServiceType) (int64, error) {
	stmt, err := cluster.Stmt(tx, serviceID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"serviceID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, name)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "Service not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"services\" ID: %w", err)
	}

	return id, nil
}

// ServiceExists checks if a Service with the given key exists.
// generator: Service Exists
func ServiceExists(ctx context.Context, tx *sql.Tx, name ServiceType) (bool, error) {
	_, err := GetServiceID(ctx, tx, name)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// CreateService adds a new Service to the database.
// generator: Service Create
func CreateService(ctx context.Context, tx *sql.Tx, object Service) (int64, error) {
	// Check if a Service with the same key exists.
	exists, err := ServiceExists(ctx, tx, object.Name)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"services\" entry already exists")
	}

	args := make([]any, 2)

	// Populate the statement arguments.
	args[0] = object.Name
	args[1] = object.StateDir

	// Prepared statement to use.
	stmt, err := cluster.Stmt(tx, serviceCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"serviceCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"services\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"services\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteService deletes the Service matching the given key parameters.
// generator: Service DeleteOne-by-Name
func DeleteService(ctx context.Context, tx *sql.Tx, name ServiceType) error {
	stmt, err := cluster.Stmt(tx, serviceDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"serviceDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"services\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "Service not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d Service rows instead of 1", n)
	}

	return nil
}

// UpdateService updates the Service matching the given key parameters.
// generator: Service Update
func UpdateService(ctx context.Context, tx *sql.Tx, name ServiceType, object Service) error {
	id, err := GetServiceID(ctx, tx, name)
	if err != nil {
		return err
	}

	stmt, err := cluster.Stmt(tx, serviceUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"serviceUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.Name, object.StateDir, id)
	if err != nil {
		return fmt.Errorf("Update \"services\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}
